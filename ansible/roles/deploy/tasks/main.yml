---
- name: Ensure repository is cloned and set to desired version
  become: True
  become_user: "{{ user }}"
  git:
    repo: "{{ repository }}"
    dest: "{{ app_folder }}"
    version: "{{ branch }}"
    force: True
    accept_hostkey: True

- name: Ensure Server Dotenv file is ready
  become: True
  become_user: "{{ user }}"
  template:
    src: "env.j2"
    dest: "{{ app_folder }}/server/.env"
    owner: "{{ user }}"
    group: "{{ group }}"
    mode: 0644

- name: Install global NPM modules
  become: True
  become_user: "{{ user }}"
  npm:
    name: forever
    state: present
    global: True
    executable: "{{ npm_exe }}"

- name: Create symbolic links for Node and NPM
  file:
    state: link
    src: "{{ node_bin }}/{{ item }}"
    dest: "/usr/local/bin/{{ item }}"
    owner: "{{ user }}"
    group: "{{ group }}"
    mode: 0775
  with_items:
    - "npm"
    - "node"
    - "forever"

- name: Create the main deploy directories
  file:
    path: "{{ home_folder }}/{{ item }}"
    owner: "{{ user }}"
    group: "{{ group }}"
    state: directory
    mode: 0755
  with_items:
    - "logs"
    - "scripts"

- name: Create startup script
  template:
    src: "start.bash.j2"
    dest: "{{ home_folder }}/scripts/start.bash"
    owner: "{{ user }}"
    group: "{{ group }}"
    mode: 0755

- name: Create systemd services
  template:
    src: "systemd.j2"
    dest: "/etc/systemd/system/{{ item.name }}.service"
  with_items: "{{ boot_scripts }}"

- name: Install server NPM modules
  become: True
  become_user: "{{ user }}"
  npm:
    path: "{{ app_folder }}/server"
    executable: "{{ npm_exe }}"

- name: Install client NPM modules
  become: True
  become_user: "{{ user }}"
  npm:
    path: "{{ app_folder }}/client"
    executable: "{{ npm_exe }}"

- name: Build static client
  become: True
  become_user: "{{ name }}"
  shell: >
    cd {{ app_folder }}/client && \
    {{ npm_exe }} run build

- name: Make sure API is running and enabled
  systemd:
    state: started
    enabled: True
    name: "{{ name }}"
    daemon_reload: True

- name: Make sure API is restarted
  systemd:
    state: restarted
    name: "{{ name }}"
    daemon_reload: True
