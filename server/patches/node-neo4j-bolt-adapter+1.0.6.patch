diff --git a/node_modules/node-neo4j-bolt-adapter/.index.js.swp b/node_modules/node-neo4j-bolt-adapter/.index.js.swp
new file mode 100644
index 0000000..53b5c2c
Binary files /dev/null and b/node_modules/node-neo4j-bolt-adapter/.index.js.swp differ
diff --git a/node_modules/node-neo4j-bolt-adapter/Mapper.js b/node_modules/node-neo4j-bolt-adapter/Mapper.js
index d90814c..16d2bc1 100644
--- a/node_modules/node-neo4j-bolt-adapter/Mapper.js
+++ b/node_modules/node-neo4j-bolt-adapter/Mapper.js
@@ -8,14 +8,14 @@
 //
 ////////////////////////////////////////////////////////////////////////////////
 
-const neo4j = require('neo4j-driver');
+var neo4j;
 
 class Mapper {
 
-    constructor() {
+    constructor(lib) {
+      neo4j = lib;
     }
 
-
     mapToNative(records) {
 
         return {
@@ -59,9 +59,10 @@ class Mapper {
 
 const toNative = function (val) {
     if (val === null) return val;
-    if (val instanceof neo4j.v1.types.Node) return toNative(val.properties);
-    if (val instanceof neo4j.v1.types.Relationship) return toNative(val.properties);
-    if (neo4j.v1.isInt(val)) return val.toNumber();
+    if (val instanceof neo4j.types.Node) return toNative(val.properties);
+    if (val instanceof neo4j.types.Relationship) return toNative(val.properties);
+    if (val instanceof neo4j.types.Point) return val;
+    if (neo4j.isInt(val)) return val.toNumber();
     if (Array.isArray(val)) return val.map(a => toNative(a));
     if (isRecord(val)) return toNative(recordToNative(val));
     if (typeof val === 'object') return mapObj(toNative, val);
diff --git a/node_modules/node-neo4j-bolt-adapter/index.js b/node_modules/node-neo4j-bolt-adapter/index.js
index 76d1ae6..05f3cc5 100644
--- a/node_modules/node-neo4j-bolt-adapter/index.js
+++ b/node_modules/node-neo4j-bolt-adapter/index.js
@@ -8,22 +8,21 @@
 //
 ////////////////////////////////////////////////////////////////////////////////
 
-const neo = require('neo4j-driver').v1;
 const Mapper = require('./Mapper');
 
 class BoltAdapter {
 
-    constructor(driver) {
+    constructor(driver, lib) {
         this.driver = driver;
-        this.mapper = new Mapper();
+        this.mapper = new Mapper(lib);
     }
 
-    cypherQueryAsync(query, params) {
+    cypherQueryAsync(query, params, database) {
 
         const self = this;
         return new Promise(function (resolve, reject) {
 
-            const session = self.driver.session();
+            const session = self.driver.session((database?{database}:null));
             const readPromise = session.readTransaction(transaction => transaction.run(query, params));
 
             readPromise.then(result => {
@@ -36,12 +35,12 @@ class BoltAdapter {
         })
     }
 
-    writeQueryAsync(query, params) {
+    writeQueryAsync(query, params, database) {
 
         const self = this;
         return new Promise((resolve, reject) => {
 
-            const session = self.driver.session();
+            const session = self.driver.session((database?{database}:null));
             const writePromise = session.writeTransaction(transaction => transaction.run(query, params));
 
             writePromise.then(result => {
